generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  description     String
  category        CategoryType
  host            HostType
  reference       String
  mainImage       String
  targetDonation  Int?
  currentDonation Int?
  frequency       String?
  survey          Survey[]
  tickets         Tickets[]
  response        Response[]
  validation      Validation[]
  Props           AddedProps[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Tickets {
  id          String   @id @default(cuid())
  order       Int
  price       Int?
  quantity    Int?
  name        String?
  description String?
  eventId     String?
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([eventId])
}

model Survey {
  id         String     @id @default(cuid())
  eventId    String
  order      Int
  question   String
  options    String[]
  isRequired Boolean
  type       SurveyType
  answer     Answer[]
  event      Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([eventId])
}

model Validation {
  id        String      @id @default(cuid())
  eventId   String
  type      String
  order     Int
  checklist Checklist[]

  Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model AddedProps {
  id      String @id @default(cuid())
  eventId String
  order   Int
  type    String
  tags    Tag[]

  Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Response {
  id           String      @id @default(cuid())
  order        Int
  eventId      String
  submissionId String      @default(cuid()) //TODO:Replace with OrderId
  remark       Remark[]
  upload       Upload[]
  checklist    Checklist[]
  answer       Answer[]
  tag          Tag[]

  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Tag {
  id         String @id @default(cuid())
  note       String
  order      Int
  propsId    String
  responseId String

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Response   Response   @relation(fields: [responseId], references: [id])
  AddedProps AddedProps @relation(fields: [propsId], references: [id])

  @@index([responseId])
  @@index([propsId])
}

model Upload {
  id         String @id @default(cuid())
  link       String
  order      Int
  note       String
  responseId String

  response Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([responseId])
}

model Remark {
  id         String @id @default(cuid())
  order      Int
  note       String
  responseId String

  response Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([responseId])
}

model Answer {
  id         String   @id @default(cuid())
  order      Int
  responseId String
  surveyId   String
  input      String?
  checkbox   String[]

  response  Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
  @@index([responseId])
}

model Checklist {
  id           String  @id @default(cuid())
  responseId   String
  validationId String
  order        Int
  isCheck      Boolean

  response   Response   @relation(fields: [responseId], references: [id], onDelete: Cascade)
  Validation Validation @relation(fields: [validationId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([responseId])
  @@index([validationId])
}

enum HostType {
  PKAM
  TURATH
}

enum SurveyType {
  SHORT_ANSWER
  PARAGRAPH
  MULTIPLE_CHOICE
  CHECKBOXES
}

enum CategoryType {
  PREMIUM
  GENERAL
  INFAQ
  PREVIEW
}
