generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id             String       @id @default(cuid())
  title          String
  description    String
  category       CategoryType
  host           HostType
  reference      String
  mainImage      String
  targetDonation Int?
  frequency      String?
  survey         Survey[]
  ticket         Ticket[]
  response       Response[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Ticket {
  id          String   @id @default(cuid())
  order       Int
  price       Int?
  quantity    Int?
  eventId     String?
  name        String?
  description String?
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([eventId])
}

model Survey {
  id        String     @id @default(cuid())
  eventId   String
  order     Int
  type      SurveyType
  question  String
  options   String[]
  answer    Answer[]
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([eventId])
}

model Response {
  id           String       @id @default(cuid())
  order        Int
  eventId      String
  submissionId String       @default(cuid()) //TODO:Replace with OrderId
  remark       Remark[]
  upload       Upload[]
  validation   Validation[]
  answer       Answer[]

  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Upload {
  id         String @id @default(cuid())
  link       String
  note       String
  responseId String

  response Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([responseId])
}

model Remark {
  id         String @id @default(cuid())
  note       String
  responseId String

  response Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([responseId])
}

model Answer {
  id         String   @id @default(cuid())
  order      Int
  responseId String
  surveyId   String
  input      String?
  checkbox   String[]

  response  Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
  @@index([responseId])
}

model Validation {
  id         String  @id @default(cuid())
  responseId String
  type       String
  isCheck    Boolean

  response  Response @relation(fields: [responseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum HostType {
  PKAM
  TURATH
}

enum SurveyType {
  SHORT_ANSWER
  PARAGRAPH
  MULTIPLE_CHOICE
  CHECKBOXES
}

enum CategoryType {
  PREMIUM
  GENERAL
  INFAQ
  PREVIEW
}
